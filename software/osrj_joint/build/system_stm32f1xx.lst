ARM GAS  /tmp/cc7BA8b1.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"system_stm32f1xx.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	SystemCoreClock
  16              		.section	.data.SystemCoreClock,"aw",%progbits
  17              		.align	2
  20              	SystemCoreClock:
  21 0000 0024F400 		.word	16000000
  22              		.global	AHBPrescTable
  23              		.section	.rodata.AHBPrescTable,"a",%progbits
  24              		.align	2
  27              	AHBPrescTable:
  28 0000 00       		.byte	0
  29 0001 00       		.byte	0
  30 0002 00       		.byte	0
  31 0003 00       		.byte	0
  32 0004 00       		.byte	0
  33 0005 00       		.byte	0
  34 0006 00       		.byte	0
  35 0007 00       		.byte	0
  36 0008 01       		.byte	1
  37 0009 02       		.byte	2
  38 000a 03       		.byte	3
  39 000b 04       		.byte	4
  40 000c 06       		.byte	6
  41 000d 07       		.byte	7
  42 000e 08       		.byte	8
  43 000f 09       		.byte	9
  44              		.global	APBPrescTable
  45              		.section	.rodata.APBPrescTable,"a",%progbits
  46              		.align	2
  49              	APBPrescTable:
  50 0000 00       		.byte	0
  51 0001 00       		.byte	0
  52 0002 00       		.byte	0
  53 0003 00       		.byte	0
  54 0004 01       		.byte	1
  55 0005 02       		.byte	2
  56 0006 03       		.byte	3
  57 0007 04       		.byte	4
  58              		.section	.text.SystemInit,"ax",%progbits
  59              		.align	1
  60              		.global	SystemInit
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
ARM GAS  /tmp/cc7BA8b1.s 			page 2


  64              		.fpu softvfp
  66              	SystemInit:
  67              	.LFB65:
  68              		.file 1 "Src/system_stm32f1xx.c"
   1:Src/system_stm32f1xx.c **** /**
   2:Src/system_stm32f1xx.c ****   ******************************************************************************
   3:Src/system_stm32f1xx.c ****   * @file    system_stm32f1xx.c
   4:Src/system_stm32f1xx.c ****   * @author  MCD Application Team
   5:Src/system_stm32f1xx.c ****   * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
   6:Src/system_stm32f1xx.c ****   * 
   7:Src/system_stm32f1xx.c ****   * 1.  This file provides two functions and one global variable to be called from 
   8:Src/system_stm32f1xx.c ****   *     user application:
   9:Src/system_stm32f1xx.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  10:Src/system_stm32f1xx.c ****   *                      factors, AHB/APBx prescalers and Flash settings). 
  11:Src/system_stm32f1xx.c ****   *                      This function is called at startup just after reset and 
  12:Src/system_stm32f1xx.c ****   *                      before branch to main program. This call is made inside
  13:Src/system_stm32f1xx.c ****   *                      the "startup_stm32f1xx_xx.s" file.
  14:Src/system_stm32f1xx.c ****   *
  15:Src/system_stm32f1xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  16:Src/system_stm32f1xx.c ****   *                                  by the user application to setup the SysTick 
  17:Src/system_stm32f1xx.c ****   *                                  timer or configure other parameters.
  18:Src/system_stm32f1xx.c ****   *                                     
  19:Src/system_stm32f1xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  20:Src/system_stm32f1xx.c ****   *                                 be called whenever the core clock is changed
  21:Src/system_stm32f1xx.c ****   *                                 during program execution.
  22:Src/system_stm32f1xx.c ****   *
  23:Src/system_stm32f1xx.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  24:Src/system_stm32f1xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f1xx_xx.s" file, to
  25:Src/system_stm32f1xx.c ****   *    configure the system clock before to branch to main program.
  26:Src/system_stm32f1xx.c ****   *
  27:Src/system_stm32f1xx.c ****   * 4. The default value of HSE crystal is set to 8 MHz (or 25 MHz, depending on
  28:Src/system_stm32f1xx.c ****   *    the product used), refer to "HSE_VALUE". 
  29:Src/system_stm32f1xx.c ****   *    When HSE is used as system clock source, directly or through PLL, and you
  30:Src/system_stm32f1xx.c ****   *    are using different crystal you have to adapt the HSE value to your own
  31:Src/system_stm32f1xx.c ****   *    configuration.
  32:Src/system_stm32f1xx.c ****   *        
  33:Src/system_stm32f1xx.c ****   ******************************************************************************
  34:Src/system_stm32f1xx.c ****   * @attention
  35:Src/system_stm32f1xx.c ****   *
  36:Src/system_stm32f1xx.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  37:Src/system_stm32f1xx.c ****   * All rights reserved.</center></h2>
  38:Src/system_stm32f1xx.c ****   *
  39:Src/system_stm32f1xx.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  40:Src/system_stm32f1xx.c ****   * the "License"; You may not use this file except in compliance with the
  41:Src/system_stm32f1xx.c ****   * License. You may obtain a copy of the License at:
  42:Src/system_stm32f1xx.c ****   *                        opensource.org/licenses/BSD-3-Clause
  43:Src/system_stm32f1xx.c ****   *
  44:Src/system_stm32f1xx.c ****   ******************************************************************************
  45:Src/system_stm32f1xx.c ****   */
  46:Src/system_stm32f1xx.c **** 
  47:Src/system_stm32f1xx.c **** /** @addtogroup CMSIS
  48:Src/system_stm32f1xx.c ****   * @{
  49:Src/system_stm32f1xx.c ****   */
  50:Src/system_stm32f1xx.c **** 
  51:Src/system_stm32f1xx.c **** /** @addtogroup stm32f1xx_system
  52:Src/system_stm32f1xx.c ****   * @{
  53:Src/system_stm32f1xx.c ****   */  
ARM GAS  /tmp/cc7BA8b1.s 			page 3


  54:Src/system_stm32f1xx.c ****   
  55:Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Includes
  56:Src/system_stm32f1xx.c ****   * @{
  57:Src/system_stm32f1xx.c ****   */
  58:Src/system_stm32f1xx.c **** 
  59:Src/system_stm32f1xx.c **** #include "stm32f1xx.h"
  60:Src/system_stm32f1xx.c **** 
  61:Src/system_stm32f1xx.c **** /**
  62:Src/system_stm32f1xx.c ****   * @}
  63:Src/system_stm32f1xx.c ****   */
  64:Src/system_stm32f1xx.c **** 
  65:Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_TypesDefinitions
  66:Src/system_stm32f1xx.c ****   * @{
  67:Src/system_stm32f1xx.c ****   */
  68:Src/system_stm32f1xx.c **** 
  69:Src/system_stm32f1xx.c **** /**
  70:Src/system_stm32f1xx.c ****   * @}
  71:Src/system_stm32f1xx.c ****   */
  72:Src/system_stm32f1xx.c **** 
  73:Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Defines
  74:Src/system_stm32f1xx.c ****   * @{
  75:Src/system_stm32f1xx.c ****   */
  76:Src/system_stm32f1xx.c **** 
  77:Src/system_stm32f1xx.c **** #if !defined  (HSE_VALUE) 
  78:Src/system_stm32f1xx.c ****   #define HSE_VALUE               8000000U /*!< Default value of the External oscillator in Hz.
  79:Src/system_stm32f1xx.c ****                                                 This value can be provided and adapted by the user 
  80:Src/system_stm32f1xx.c **** #endif /* HSE_VALUE */
  81:Src/system_stm32f1xx.c **** 
  82:Src/system_stm32f1xx.c **** #if !defined  (HSI_VALUE)
  83:Src/system_stm32f1xx.c ****   #define HSI_VALUE               8000000U /*!< Default value of the Internal oscillator in Hz.
  84:Src/system_stm32f1xx.c ****                                                 This value can be provided and adapted by the user 
  85:Src/system_stm32f1xx.c **** #endif /* HSI_VALUE */
  86:Src/system_stm32f1xx.c **** 
  87:Src/system_stm32f1xx.c **** /*!< Uncomment the following line if you need to use external SRAM  */ 
  88:Src/system_stm32f1xx.c **** #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) ||
  89:Src/system_stm32f1xx.c **** /* #define DATA_IN_ExtSRAM */
  90:Src/system_stm32f1xx.c **** #endif /* STM32F100xE || STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG */
  91:Src/system_stm32f1xx.c **** 
  92:Src/system_stm32f1xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
  93:Src/system_stm32f1xx.c ****      Internal SRAM. */ 
  94:Src/system_stm32f1xx.c **** /* #define VECT_TAB_SRAM */
  95:Src/system_stm32f1xx.c **** #define VECT_TAB_OFFSET  0x00000000U /*!< Vector Table base offset field. 
  96:Src/system_stm32f1xx.c ****                                   This value must be a multiple of 0x200. */
  97:Src/system_stm32f1xx.c **** 
  98:Src/system_stm32f1xx.c **** 
  99:Src/system_stm32f1xx.c **** /**
 100:Src/system_stm32f1xx.c ****   * @}
 101:Src/system_stm32f1xx.c ****   */
 102:Src/system_stm32f1xx.c **** 
 103:Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Macros
 104:Src/system_stm32f1xx.c ****   * @{
 105:Src/system_stm32f1xx.c ****   */
 106:Src/system_stm32f1xx.c **** 
 107:Src/system_stm32f1xx.c **** /**
 108:Src/system_stm32f1xx.c ****   * @}
 109:Src/system_stm32f1xx.c ****   */
 110:Src/system_stm32f1xx.c **** 
ARM GAS  /tmp/cc7BA8b1.s 			page 4


 111:Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Variables
 112:Src/system_stm32f1xx.c ****   * @{
 113:Src/system_stm32f1xx.c ****   */
 114:Src/system_stm32f1xx.c **** 
 115:Src/system_stm32f1xx.c ****   /* This variable is updated in three ways:
 116:Src/system_stm32f1xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 117:Src/system_stm32f1xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 118:Src/system_stm32f1xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency 
 119:Src/system_stm32f1xx.c ****          Note: If you use this function to configure the system clock; then there
 120:Src/system_stm32f1xx.c ****                is no need to call the 2 first functions listed above, since SystemCoreClock
 121:Src/system_stm32f1xx.c ****                variable is updated automatically.
 122:Src/system_stm32f1xx.c ****   */
 123:Src/system_stm32f1xx.c **** uint32_t SystemCoreClock = 16000000;
 124:Src/system_stm32f1xx.c **** const uint8_t AHBPrescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 125:Src/system_stm32f1xx.c **** const uint8_t APBPrescTable[8U] =  {0, 0, 0, 0, 1, 2, 3, 4};
 126:Src/system_stm32f1xx.c **** 
 127:Src/system_stm32f1xx.c **** /**
 128:Src/system_stm32f1xx.c ****   * @}
 129:Src/system_stm32f1xx.c ****   */
 130:Src/system_stm32f1xx.c **** 
 131:Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_FunctionPrototypes
 132:Src/system_stm32f1xx.c ****   * @{
 133:Src/system_stm32f1xx.c ****   */
 134:Src/system_stm32f1xx.c **** 
 135:Src/system_stm32f1xx.c **** #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) ||
 136:Src/system_stm32f1xx.c **** #ifdef DATA_IN_ExtSRAM
 137:Src/system_stm32f1xx.c ****   static void SystemInit_ExtMemCtl(void); 
 138:Src/system_stm32f1xx.c **** #endif /* DATA_IN_ExtSRAM */
 139:Src/system_stm32f1xx.c **** #endif /* STM32F100xE || STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG */
 140:Src/system_stm32f1xx.c **** 
 141:Src/system_stm32f1xx.c **** /**
 142:Src/system_stm32f1xx.c ****   * @}
 143:Src/system_stm32f1xx.c ****   */
 144:Src/system_stm32f1xx.c **** 
 145:Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Functions
 146:Src/system_stm32f1xx.c ****   * @{
 147:Src/system_stm32f1xx.c ****   */
 148:Src/system_stm32f1xx.c **** 
 149:Src/system_stm32f1xx.c **** /**
 150:Src/system_stm32f1xx.c ****   * @brief  Setup the microcontroller system
 151:Src/system_stm32f1xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 152:Src/system_stm32f1xx.c ****   *         SystemCoreClock variable.
 153:Src/system_stm32f1xx.c ****   * @note   This function should be used only after reset.
 154:Src/system_stm32f1xx.c ****   * @param  None
 155:Src/system_stm32f1xx.c ****   * @retval None
 156:Src/system_stm32f1xx.c ****   */
 157:Src/system_stm32f1xx.c **** void SystemInit (void)
 158:Src/system_stm32f1xx.c **** {
  69              		.loc 1 158 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 1, uses_anonymous_args = 0
  73              		@ link register save eliminated.
  74 0000 80B4     		push	{r7}
  75              	.LCFI0:
  76              		.cfi_def_cfa_offset 4
  77              		.cfi_offset 7, -4
ARM GAS  /tmp/cc7BA8b1.s 			page 5


  78 0002 00AF     		add	r7, sp, #0
  79              	.LCFI1:
  80              		.cfi_def_cfa_register 7
 159:Src/system_stm32f1xx.c ****   /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
 160:Src/system_stm32f1xx.c ****   /* Set HSION bit */
 161:Src/system_stm32f1xx.c ****   RCC->CR |= 0x00000001U;
  81              		.loc 1 161 0
  82 0004 154B     		ldr	r3, .L2
  83 0006 1B68     		ldr	r3, [r3]
  84 0008 144A     		ldr	r2, .L2
  85 000a 43F00103 		orr	r3, r3, #1
  86 000e 1360     		str	r3, [r2]
 162:Src/system_stm32f1xx.c **** 
 163:Src/system_stm32f1xx.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 164:Src/system_stm32f1xx.c **** #if !defined(STM32F105xC) && !defined(STM32F107xC)
 165:Src/system_stm32f1xx.c ****   RCC->CFGR &= 0xF8FF0000U;
  87              		.loc 1 165 0
  88 0010 124B     		ldr	r3, .L2
  89 0012 5A68     		ldr	r2, [r3, #4]
  90 0014 1149     		ldr	r1, .L2
  91 0016 124B     		ldr	r3, .L2+4
  92 0018 1340     		ands	r3, r3, r2
  93 001a 4B60     		str	r3, [r1, #4]
 166:Src/system_stm32f1xx.c **** #else
 167:Src/system_stm32f1xx.c ****   RCC->CFGR &= 0xF0FF0000U;
 168:Src/system_stm32f1xx.c **** #endif /* STM32F105xC */   
 169:Src/system_stm32f1xx.c ****   
 170:Src/system_stm32f1xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 171:Src/system_stm32f1xx.c ****   RCC->CR &= 0xFEF6FFFFU;
  94              		.loc 1 171 0
  95 001c 0F4B     		ldr	r3, .L2
  96 001e 1B68     		ldr	r3, [r3]
  97 0020 0E4A     		ldr	r2, .L2
  98 0022 23F08473 		bic	r3, r3, #17301504
  99 0026 23F48033 		bic	r3, r3, #65536
 100 002a 1360     		str	r3, [r2]
 172:Src/system_stm32f1xx.c **** 
 173:Src/system_stm32f1xx.c ****   /* Reset HSEBYP bit */
 174:Src/system_stm32f1xx.c ****   RCC->CR &= 0xFFFBFFFFU;
 101              		.loc 1 174 0
 102 002c 0B4B     		ldr	r3, .L2
 103 002e 1B68     		ldr	r3, [r3]
 104 0030 0A4A     		ldr	r2, .L2
 105 0032 23F48023 		bic	r3, r3, #262144
 106 0036 1360     		str	r3, [r2]
 175:Src/system_stm32f1xx.c **** 
 176:Src/system_stm32f1xx.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 177:Src/system_stm32f1xx.c ****   RCC->CFGR &= 0xFF80FFFFU;
 107              		.loc 1 177 0
 108 0038 084B     		ldr	r3, .L2
 109 003a 5B68     		ldr	r3, [r3, #4]
 110 003c 074A     		ldr	r2, .L2
 111 003e 23F4FE03 		bic	r3, r3, #8323072
 112 0042 5360     		str	r3, [r2, #4]
 178:Src/system_stm32f1xx.c **** 
 179:Src/system_stm32f1xx.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 180:Src/system_stm32f1xx.c ****   /* Reset PLL2ON and PLL3ON bits */
ARM GAS  /tmp/cc7BA8b1.s 			page 6


 181:Src/system_stm32f1xx.c ****   RCC->CR &= 0xEBFFFFFFU;
 182:Src/system_stm32f1xx.c **** 
 183:Src/system_stm32f1xx.c ****   /* Disable all interrupts and clear pending bits  */
 184:Src/system_stm32f1xx.c ****   RCC->CIR = 0x00FF0000U;
 185:Src/system_stm32f1xx.c **** 
 186:Src/system_stm32f1xx.c ****   /* Reset CFGR2 register */
 187:Src/system_stm32f1xx.c ****   RCC->CFGR2 = 0x00000000U;
 188:Src/system_stm32f1xx.c **** #elif defined(STM32F100xB) || defined(STM32F100xE)
 189:Src/system_stm32f1xx.c ****   /* Disable all interrupts and clear pending bits  */
 190:Src/system_stm32f1xx.c ****   RCC->CIR = 0x009F0000U;
 191:Src/system_stm32f1xx.c **** 
 192:Src/system_stm32f1xx.c ****   /* Reset CFGR2 register */
 193:Src/system_stm32f1xx.c ****   RCC->CFGR2 = 0x00000000U;      
 194:Src/system_stm32f1xx.c **** #else
 195:Src/system_stm32f1xx.c ****   /* Disable all interrupts and clear pending bits  */
 196:Src/system_stm32f1xx.c ****   RCC->CIR = 0x009F0000U;
 113              		.loc 1 196 0
 114 0044 054B     		ldr	r3, .L2
 115 0046 4FF41F02 		mov	r2, #10420224
 116 004a 9A60     		str	r2, [r3, #8]
 197:Src/system_stm32f1xx.c **** #endif /* STM32F105xC */
 198:Src/system_stm32f1xx.c ****     
 199:Src/system_stm32f1xx.c **** #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) ||
 200:Src/system_stm32f1xx.c ****   #ifdef DATA_IN_ExtSRAM
 201:Src/system_stm32f1xx.c ****     SystemInit_ExtMemCtl(); 
 202:Src/system_stm32f1xx.c ****   #endif /* DATA_IN_ExtSRAM */
 203:Src/system_stm32f1xx.c **** #endif 
 204:Src/system_stm32f1xx.c **** 
 205:Src/system_stm32f1xx.c **** #ifdef VECT_TAB_SRAM
 206:Src/system_stm32f1xx.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 207:Src/system_stm32f1xx.c **** #else
 208:Src/system_stm32f1xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 117              		.loc 1 208 0
 118 004c 054B     		ldr	r3, .L2+8
 119 004e 4FF00062 		mov	r2, #134217728
 120 0052 9A60     		str	r2, [r3, #8]
 209:Src/system_stm32f1xx.c **** #endif 
 210:Src/system_stm32f1xx.c **** }
 121              		.loc 1 210 0
 122 0054 00BF     		nop
 123 0056 BD46     		mov	sp, r7
 124              	.LCFI2:
 125              		.cfi_def_cfa_register 13
 126              		@ sp needed
 127 0058 80BC     		pop	{r7}
 128              	.LCFI3:
 129              		.cfi_restore 7
 130              		.cfi_def_cfa_offset 0
 131 005a 7047     		bx	lr
 132              	.L3:
 133              		.align	2
 134              	.L2:
 135 005c 00100240 		.word	1073876992
 136 0060 0000FFF8 		.word	-117506048
 137 0064 00ED00E0 		.word	-536810240
 138              		.cfi_endproc
 139              	.LFE65:
ARM GAS  /tmp/cc7BA8b1.s 			page 7


 141              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 142              		.align	1
 143              		.global	SystemCoreClockUpdate
 144              		.syntax unified
 145              		.thumb
 146              		.thumb_func
 147              		.fpu softvfp
 149              	SystemCoreClockUpdate:
 150              	.LFB66:
 211:Src/system_stm32f1xx.c **** 
 212:Src/system_stm32f1xx.c **** /**
 213:Src/system_stm32f1xx.c ****   * @brief  Update SystemCoreClock variable according to Clock Register Values.
 214:Src/system_stm32f1xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 215:Src/system_stm32f1xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 216:Src/system_stm32f1xx.c ****   *         other parameters.
 217:Src/system_stm32f1xx.c ****   *           
 218:Src/system_stm32f1xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 219:Src/system_stm32f1xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 220:Src/system_stm32f1xx.c ****   *         based on this variable will be incorrect.         
 221:Src/system_stm32f1xx.c ****   *     
 222:Src/system_stm32f1xx.c ****   * @note   - The system frequency computed by this function is not the real 
 223:Src/system_stm32f1xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
 224:Src/system_stm32f1xx.c ****   *           constant and the selected clock source:
 225:Src/system_stm32f1xx.c ****   *             
 226:Src/system_stm32f1xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 227:Src/system_stm32f1xx.c ****   *                                              
 228:Src/system_stm32f1xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 229:Src/system_stm32f1xx.c ****   *                          
 230:Src/system_stm32f1xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 231:Src/system_stm32f1xx.c ****   *             or HSI_VALUE(*) multiplied by the PLL factors.
 232:Src/system_stm32f1xx.c ****   *         
 233:Src/system_stm32f1xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f1xx.h file (default value
 234:Src/system_stm32f1xx.c ****   *             8 MHz) but the real value may vary depending on the variations
 235:Src/system_stm32f1xx.c ****   *             in voltage and temperature.   
 236:Src/system_stm32f1xx.c ****   *    
 237:Src/system_stm32f1xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f1xx.h file (default value
 238:Src/system_stm32f1xx.c ****   *              8 MHz or 25 MHz, depending on the product used), user has to ensure
 239:Src/system_stm32f1xx.c ****   *              that HSE_VALUE is same as the real frequency of the crystal used.
 240:Src/system_stm32f1xx.c ****   *              Otherwise, this function may have wrong result.
 241:Src/system_stm32f1xx.c ****   *                
 242:Src/system_stm32f1xx.c ****   *         - The result of this function could be not correct when using fractional
 243:Src/system_stm32f1xx.c ****   *           value for HSE crystal.
 244:Src/system_stm32f1xx.c ****   * @param  None
 245:Src/system_stm32f1xx.c ****   * @retval None
 246:Src/system_stm32f1xx.c ****   */
 247:Src/system_stm32f1xx.c **** void SystemCoreClockUpdate (void)
 248:Src/system_stm32f1xx.c **** {
 151              		.loc 1 248 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 16
 154              		@ frame_needed = 1, uses_anonymous_args = 0
 155              		@ link register save eliminated.
 156 0000 80B4     		push	{r7}
 157              	.LCFI4:
 158              		.cfi_def_cfa_offset 4
 159              		.cfi_offset 7, -4
 160 0002 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/cc7BA8b1.s 			page 8


 161              	.LCFI5:
 162              		.cfi_def_cfa_offset 24
 163 0004 00AF     		add	r7, sp, #0
 164              	.LCFI6:
 165              		.cfi_def_cfa_register 7
 249:Src/system_stm32f1xx.c ****   uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 166              		.loc 1 249 0
 167 0006 0023     		movs	r3, #0
 168 0008 FB60     		str	r3, [r7, #12]
 169 000a 0023     		movs	r3, #0
 170 000c BB60     		str	r3, [r7, #8]
 171 000e 0023     		movs	r3, #0
 172 0010 7B60     		str	r3, [r7, #4]
 250:Src/system_stm32f1xx.c **** 
 251:Src/system_stm32f1xx.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 252:Src/system_stm32f1xx.c ****   uint32_t prediv1source = 0U, prediv1factor = 0U, prediv2factor = 0U, pll2mull = 0U;
 253:Src/system_stm32f1xx.c **** #endif /* STM32F105xC */
 254:Src/system_stm32f1xx.c **** 
 255:Src/system_stm32f1xx.c **** #if defined(STM32F100xB) || defined(STM32F100xE)
 256:Src/system_stm32f1xx.c ****   uint32_t prediv1factor = 0U;
 257:Src/system_stm32f1xx.c **** #endif /* STM32F100xB or STM32F100xE */
 258:Src/system_stm32f1xx.c ****     
 259:Src/system_stm32f1xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 260:Src/system_stm32f1xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 173              		.loc 1 260 0
 174 0012 2C4B     		ldr	r3, .L14
 175 0014 5B68     		ldr	r3, [r3, #4]
 176 0016 03F00C03 		and	r3, r3, #12
 177 001a FB60     		str	r3, [r7, #12]
 261:Src/system_stm32f1xx.c ****   
 262:Src/system_stm32f1xx.c ****   switch (tmp)
 178              		.loc 1 262 0
 179 001c FB68     		ldr	r3, [r7, #12]
 180 001e 042B     		cmp	r3, #4
 181 0020 07D0     		beq	.L6
 182 0022 082B     		cmp	r3, #8
 183 0024 09D0     		beq	.L7
 184 0026 002B     		cmp	r3, #0
 185 0028 33D1     		bne	.L13
 263:Src/system_stm32f1xx.c ****   {
 264:Src/system_stm32f1xx.c ****     case 0x00U:  /* HSI used as system clock */
 265:Src/system_stm32f1xx.c ****       SystemCoreClock = HSI_VALUE;
 186              		.loc 1 265 0
 187 002a 274B     		ldr	r3, .L14+4
 188 002c 274A     		ldr	r2, .L14+8
 189 002e 1A60     		str	r2, [r3]
 266:Src/system_stm32f1xx.c ****       break;
 190              		.loc 1 266 0
 191 0030 33E0     		b	.L9
 192              	.L6:
 267:Src/system_stm32f1xx.c ****     case 0x04U:  /* HSE used as system clock */
 268:Src/system_stm32f1xx.c ****       SystemCoreClock = HSE_VALUE;
 193              		.loc 1 268 0
 194 0032 254B     		ldr	r3, .L14+4
 195 0034 254A     		ldr	r2, .L14+8
 196 0036 1A60     		str	r2, [r3]
 269:Src/system_stm32f1xx.c ****       break;
ARM GAS  /tmp/cc7BA8b1.s 			page 9


 197              		.loc 1 269 0
 198 0038 2FE0     		b	.L9
 199              	.L7:
 270:Src/system_stm32f1xx.c ****     case 0x08U:  /* PLL used as system clock */
 271:Src/system_stm32f1xx.c **** 
 272:Src/system_stm32f1xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 273:Src/system_stm32f1xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 200              		.loc 1 273 0
 201 003a 224B     		ldr	r3, .L14
 202 003c 5B68     		ldr	r3, [r3, #4]
 203 003e 03F47013 		and	r3, r3, #3932160
 204 0042 BB60     		str	r3, [r7, #8]
 274:Src/system_stm32f1xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 205              		.loc 1 274 0
 206 0044 1F4B     		ldr	r3, .L14
 207 0046 5B68     		ldr	r3, [r3, #4]
 208 0048 03F48033 		and	r3, r3, #65536
 209 004c 7B60     		str	r3, [r7, #4]
 275:Src/system_stm32f1xx.c ****       
 276:Src/system_stm32f1xx.c **** #if !defined(STM32F105xC) && !defined(STM32F107xC)      
 277:Src/system_stm32f1xx.c ****       pllmull = ( pllmull >> 18U) + 2U;
 210              		.loc 1 277 0
 211 004e BB68     		ldr	r3, [r7, #8]
 212 0050 9B0C     		lsrs	r3, r3, #18
 213 0052 0233     		adds	r3, r3, #2
 214 0054 BB60     		str	r3, [r7, #8]
 278:Src/system_stm32f1xx.c ****       
 279:Src/system_stm32f1xx.c ****       if (pllsource == 0x00U)
 215              		.loc 1 279 0
 216 0056 7B68     		ldr	r3, [r7, #4]
 217 0058 002B     		cmp	r3, #0
 218 005a 06D1     		bne	.L10
 280:Src/system_stm32f1xx.c ****       {
 281:Src/system_stm32f1xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 282:Src/system_stm32f1xx.c ****         SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 219              		.loc 1 282 0
 220 005c BB68     		ldr	r3, [r7, #8]
 221 005e 1C4A     		ldr	r2, .L14+12
 222 0060 02FB03F3 		mul	r3, r2, r3
 223 0064 184A     		ldr	r2, .L14+4
 224 0066 1360     		str	r3, [r2]
 283:Src/system_stm32f1xx.c ****       }
 284:Src/system_stm32f1xx.c ****       else
 285:Src/system_stm32f1xx.c ****       {
 286:Src/system_stm32f1xx.c ****  #if defined(STM32F100xB) || defined(STM32F100xE)
 287:Src/system_stm32f1xx.c ****        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 288:Src/system_stm32f1xx.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 289:Src/system_stm32f1xx.c ****        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 290:Src/system_stm32f1xx.c ****  #else
 291:Src/system_stm32f1xx.c ****         /* HSE selected as PLL clock entry */
 292:Src/system_stm32f1xx.c ****         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 293:Src/system_stm32f1xx.c ****         {/* HSE oscillator clock divided by 2 */
 294:Src/system_stm32f1xx.c ****           SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 295:Src/system_stm32f1xx.c ****         }
 296:Src/system_stm32f1xx.c ****         else
 297:Src/system_stm32f1xx.c ****         {
 298:Src/system_stm32f1xx.c ****           SystemCoreClock = HSE_VALUE * pllmull;
ARM GAS  /tmp/cc7BA8b1.s 			page 10


 299:Src/system_stm32f1xx.c ****         }
 300:Src/system_stm32f1xx.c ****  #endif
 301:Src/system_stm32f1xx.c ****       }
 302:Src/system_stm32f1xx.c **** #else
 303:Src/system_stm32f1xx.c ****       pllmull = pllmull >> 18U;
 304:Src/system_stm32f1xx.c ****       
 305:Src/system_stm32f1xx.c ****       if (pllmull != 0x0DU)
 306:Src/system_stm32f1xx.c ****       {
 307:Src/system_stm32f1xx.c ****          pllmull += 2U;
 308:Src/system_stm32f1xx.c ****       }
 309:Src/system_stm32f1xx.c ****       else
 310:Src/system_stm32f1xx.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 311:Src/system_stm32f1xx.c ****         pllmull = 13U / 2U; 
 312:Src/system_stm32f1xx.c ****       }
 313:Src/system_stm32f1xx.c ****             
 314:Src/system_stm32f1xx.c ****       if (pllsource == 0x00U)
 315:Src/system_stm32f1xx.c ****       {
 316:Src/system_stm32f1xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 317:Src/system_stm32f1xx.c ****         SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 318:Src/system_stm32f1xx.c ****       }
 319:Src/system_stm32f1xx.c ****       else
 320:Src/system_stm32f1xx.c ****       {/* PREDIV1 selected as PLL clock entry */
 321:Src/system_stm32f1xx.c ****         
 322:Src/system_stm32f1xx.c ****         /* Get PREDIV1 clock source and division factor */
 323:Src/system_stm32f1xx.c ****         prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
 324:Src/system_stm32f1xx.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 325:Src/system_stm32f1xx.c ****         
 326:Src/system_stm32f1xx.c ****         if (prediv1source == 0U)
 327:Src/system_stm32f1xx.c ****         { 
 328:Src/system_stm32f1xx.c ****           /* HSE oscillator clock selected as PREDIV1 clock entry */
 329:Src/system_stm32f1xx.c ****           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
 330:Src/system_stm32f1xx.c ****         }
 331:Src/system_stm32f1xx.c ****         else
 332:Src/system_stm32f1xx.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 333:Src/system_stm32f1xx.c ****           
 334:Src/system_stm32f1xx.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 335:Src/system_stm32f1xx.c ****           prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4U) + 1U;
 336:Src/system_stm32f1xx.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
 337:Src/system_stm32f1xx.c ****           SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 338:Src/system_stm32f1xx.c ****         }
 339:Src/system_stm32f1xx.c ****       }
 340:Src/system_stm32f1xx.c **** #endif /* STM32F105xC */ 
 341:Src/system_stm32f1xx.c ****       break;
 225              		.loc 1 341 0
 226 0068 17E0     		b	.L9
 227              	.L10:
 292:Src/system_stm32f1xx.c ****         {/* HSE oscillator clock divided by 2 */
 228              		.loc 1 292 0
 229 006a 164B     		ldr	r3, .L14
 230 006c 5B68     		ldr	r3, [r3, #4]
 231 006e 03F40033 		and	r3, r3, #131072
 232 0072 002B     		cmp	r3, #0
 233 0074 06D0     		beq	.L12
 294:Src/system_stm32f1xx.c ****         }
 234              		.loc 1 294 0
 235 0076 BB68     		ldr	r3, [r7, #8]
 236 0078 154A     		ldr	r2, .L14+12
ARM GAS  /tmp/cc7BA8b1.s 			page 11


 237 007a 02FB03F3 		mul	r3, r2, r3
 238 007e 124A     		ldr	r2, .L14+4
 239 0080 1360     		str	r3, [r2]
 240              		.loc 1 341 0
 241 0082 0AE0     		b	.L9
 242              	.L12:
 298:Src/system_stm32f1xx.c ****         }
 243              		.loc 1 298 0
 244 0084 BB68     		ldr	r3, [r7, #8]
 245 0086 114A     		ldr	r2, .L14+8
 246 0088 02FB03F3 		mul	r3, r2, r3
 247 008c 0E4A     		ldr	r2, .L14+4
 248 008e 1360     		str	r3, [r2]
 249              		.loc 1 341 0
 250 0090 03E0     		b	.L9
 251              	.L13:
 342:Src/system_stm32f1xx.c **** 
 343:Src/system_stm32f1xx.c ****     default:
 344:Src/system_stm32f1xx.c ****       SystemCoreClock = HSI_VALUE;
 252              		.loc 1 344 0
 253 0092 0D4B     		ldr	r3, .L14+4
 254 0094 0D4A     		ldr	r2, .L14+8
 255 0096 1A60     		str	r2, [r3]
 345:Src/system_stm32f1xx.c ****       break;
 256              		.loc 1 345 0
 257 0098 00BF     		nop
 258              	.L9:
 346:Src/system_stm32f1xx.c ****   }
 347:Src/system_stm32f1xx.c ****   
 348:Src/system_stm32f1xx.c ****   /* Compute HCLK clock frequency ----------------*/
 349:Src/system_stm32f1xx.c ****   /* Get HCLK prescaler */
 350:Src/system_stm32f1xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 259              		.loc 1 350 0
 260 009a 0A4B     		ldr	r3, .L14
 261 009c 5B68     		ldr	r3, [r3, #4]
 262 009e 1B09     		lsrs	r3, r3, #4
 263 00a0 03F00F03 		and	r3, r3, #15
 264 00a4 0B4A     		ldr	r2, .L14+16
 265 00a6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 266 00a8 FB60     		str	r3, [r7, #12]
 351:Src/system_stm32f1xx.c ****   /* HCLK clock frequency */
 352:Src/system_stm32f1xx.c ****   SystemCoreClock >>= tmp;  
 267              		.loc 1 352 0
 268 00aa 074B     		ldr	r3, .L14+4
 269 00ac 1A68     		ldr	r2, [r3]
 270 00ae FB68     		ldr	r3, [r7, #12]
 271 00b0 22FA03F3 		lsr	r3, r2, r3
 272 00b4 044A     		ldr	r2, .L14+4
 273 00b6 1360     		str	r3, [r2]
 353:Src/system_stm32f1xx.c **** }
 274              		.loc 1 353 0
 275 00b8 00BF     		nop
 276 00ba 1437     		adds	r7, r7, #20
 277              	.LCFI7:
 278              		.cfi_def_cfa_offset 4
 279 00bc BD46     		mov	sp, r7
 280              	.LCFI8:
ARM GAS  /tmp/cc7BA8b1.s 			page 12


 281              		.cfi_def_cfa_register 13
 282              		@ sp needed
 283 00be 80BC     		pop	{r7}
 284              	.LCFI9:
 285              		.cfi_restore 7
 286              		.cfi_def_cfa_offset 0
 287 00c0 7047     		bx	lr
 288              	.L15:
 289 00c2 00BF     		.align	2
 290              	.L14:
 291 00c4 00100240 		.word	1073876992
 292 00c8 00000000 		.word	SystemCoreClock
 293 00cc 00127A00 		.word	8000000
 294 00d0 00093D00 		.word	4000000
 295 00d4 00000000 		.word	AHBPrescTable
 296              		.cfi_endproc
 297              	.LFE66:
 299              		.text
 300              	.Letext0:
 301              		.file 2 "/home/cole/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/
 302              		.file 3 "/home/cole/Applications/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_std
 303              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 304              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 305              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 306              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 307              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/cc7BA8b1.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32f1xx.c
     /tmp/cc7BA8b1.s:20     .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/cc7BA8b1.s:17     .data.SystemCoreClock:0000000000000000 $d
     /tmp/cc7BA8b1.s:27     .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/cc7BA8b1.s:24     .rodata.AHBPrescTable:0000000000000000 $d
     /tmp/cc7BA8b1.s:49     .rodata.APBPrescTable:0000000000000000 APBPrescTable
     /tmp/cc7BA8b1.s:46     .rodata.APBPrescTable:0000000000000000 $d
     /tmp/cc7BA8b1.s:59     .text.SystemInit:0000000000000000 $t
     /tmp/cc7BA8b1.s:66     .text.SystemInit:0000000000000000 SystemInit
     /tmp/cc7BA8b1.s:135    .text.SystemInit:000000000000005c $d
     /tmp/cc7BA8b1.s:142    .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/cc7BA8b1.s:149    .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/cc7BA8b1.s:291    .text.SystemCoreClockUpdate:00000000000000c4 $d

NO UNDEFINED SYMBOLS
